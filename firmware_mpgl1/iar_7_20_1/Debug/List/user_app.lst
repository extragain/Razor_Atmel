###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        25/Feb/2017  02:02:23
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpg_common\application\user_app.c
#    Command line =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpg_common\application\user_app.c
#        --preprocess=cl
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     61          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          #if PROGRAMMINGG_COMPETITION

   \                                 In section .bss, align 1
     64          static u8  u8Counter  = 0;
   \                     u8Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     65          static u8  u8Configed = 0;
   \                     u8Configed:
   \   00000000                      DS8 1
     66          //static u16 u16Counter = 0;

   \                                 In section .bss, align 2
     67          static u16 u16Pwm     = 0;
   \                     u16Pwm:
   \   00000000                      DS8 2
     68          

   \                                 In section .data, align 4
     69          static LedContrlType    UserApp_LedContrlType[LED_NUM]    = LED_CONTRL_TYPE_INIT;
   \                     UserApp_LedContrlType:
   \   00000000   0x00 0x00          DC8 0, 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x01 0x00          DC8 1, 0
   \   00000006   0x0000             DC16 0
   \   00000008   0x02 0x00          DC8 2, 0
   \   0000000A   0x0000             DC16 0
   \   0000000C   0x03 0x00          DC8 3, 0
   \   0000000E   0x0000             DC16 0
   \   00000010   0x04 0x00          DC8 4, 0
   \   00000012   0x0000             DC16 0
   \   00000014   0x05 0x00          DC8 5, 0
   \   00000016   0x0000             DC16 0
   \   00000018   0x06 0x00          DC8 6, 0
   \   0000001A   0x0000             DC16 0
   \   0000001C   0x07 0x00          DC8 7, 0
   \   0000001E   0x0000             DC16 0

   \                                 In section .data, align 4
     70          static LedOnOffTimeType UserApp_LedOnOffTimeType[LED_NUM] = LED_ON_OFF_TIME_INIT;
   \                     UserApp_LedOnOffTimeType:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000010   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000020   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000030   0x03 0x00          DC8 3, 0, 0, 0
   \              0x00 0x00    
   \   00000034   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000040   0x04 0x00          DC8 4, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000050   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   00000054   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000060   0x06 0x00          DC8 6, 0, 0, 0
   \              0x00 0x00    
   \   00000064   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \   00000070   0x07 0x00          DC8 7, 0, 0, 0
   \              0x00 0x00    
   \   00000074   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   
     71          #endif
     72          
     73          
     74          /**********************************************************************************************************************
     75          Function Definitions
     76          **********************************************************************************************************************/
     77          
     78          /*--------------------------------------------------------------------------------------------------------------------*/
     79          /* Public functions                                                                                                   */
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          #if PROGRAMMINGG_COMPETITION
     82          /*--------------------------------------------------------------------------------------------------------------------
     83          Function: LedAllOff
     84          
     85          Description:
     86          All Led off
     87          
     88          Requires:
     89            -
     90          
     91          Promises:
     92            - 
     93          */

   \                                 In section .text, align 2, keep-with-next
     94          void LedAllOff(void)
     95          {
   \                     LedAllOff: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     96            LedOff(WHITE);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       LedOff
     97            LedOff(PURPLE);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       LedOff
     98            LedOff(BLUE);
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x.... 0x....      BL       LedOff
     99            LedOff(CYAN);
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       LedOff
    100            LedOff(GREEN);
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x.... 0x....      BL       LedOff
    101            LedOff(YELLOW);
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       LedOff
    102            LedOff(ORANGE);
   \   00000026   0x2006             MOVS     R0,#+6
   \   00000028   0x.... 0x....      BL       LedOff
    103            LedOff(RED);
   \   0000002C   0x2007             MOVS     R0,#+7
   \   0000002E   0x.... 0x....      BL       LedOff
    104          }
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    105          #endif
    106          
    107          /*--------------------------------------------------------------------------------------------------------------------*/
    108          /* Protected functions                                                                                                */
    109          /*--------------------------------------------------------------------------------------------------------------------*/
    110          
    111          /*--------------------------------------------------------------------------------------------------------------------
    112          Function: UserAppInitialize
    113          
    114          Description:
    115          Initializes the State Machine and its variables.
    116          
    117          Requires:
    118            -
    119          
    120          Promises:
    121            - 
    122          */

   \                                 In section .text, align 2, keep-with-next
    123          void UserAppInitialize(void)
    124          {
    125          
    126            /* If good initialization, set state to Idle */
    127            if( 1 /* Add condition for good init */)
    128            {
    129              UserApp_StateMachine = UserAppSM_Idle;
   \                     UserAppInitialize: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   00000004   0x....             LDR.N    R1,??DataTable5
   \   00000006   0x6008             STR      R0,[R1, #+0]
    130            }
    131            else
    132            {
    133              /* The task isn't properly initialized, so shut it down and don't run */
    134              UserApp_StateMachine = UserAppSM_FailedInit;
    135            }
    136          
    137          } /* end UserAppInitialize() */
   \   00000008   0x4770             BX       LR               ;; return
    138          
    139          
    140          /*----------------------------------------------------------------------------------------------------------------------
    141          Function UserAppRunActiveState()
    142          
    143          Description:
    144          Selects and runs one iteration of the current state in the state machine.
    145          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    146          may take 1ms / n to execute.
    147          
    148          Requires:
    149            - State machine function pointer points at current state
    150          
    151          Promises:
    152            - Calls the function to pointed by the state machine function pointer
    153          */

   \                                 In section .text, align 2, keep-with-next
    154          void UserAppRunActiveState(void)
    155          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    156            UserApp_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    157          
    158          } /* end UserAppRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    159          
    160          
    161          /*--------------------------------------------------------------------------------------------------------------------*/
    162          /* Private functions                                                                                                  */
    163          /*--------------------------------------------------------------------------------------------------------------------*/
    164          
    165          
    166          /**********************************************************************************************************************
    167          State Machine Function Definitions
    168          **********************************************************************************************************************/
    169          
    170          /*-------------------------------------------------------------------------------------------------------------------*/
    171          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    172          static void UserAppSM_Idle(void)
    173          {
   \                     UserAppSM_Idle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
    174          #if PROGRAMMINGG_COMPETITION
    175            
    176            u8 u8String[] = "You have not config your efashion ";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable5_1
   \   00000008   0x2223             MOVS     R2,#+35
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy
    177            static u8  u8Mode;
    178            
    179            /*Key Value---Mode*/
    180            u8Mode = UserAppSM_GetMode();
   \   0000000E   0x.... 0x....      BL       UserAppSM_GetMode
   \   00000012   0x....             LDR.N    R1,??DataTable5_2
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    181            
    182            /*config user data*/
    183            UserAppSM_ConfigEfashion();
   \   00000016   0x.... 0x....      BL       UserAppSM_ConfigEfashion
    184            
    185            /*Deal Every Mode*/
    186            switch(u8Mode)
   \   0000001A   0x....             LDR.N    R0,??DataTable5_2
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD005             BEQ.N    ??UserAppSM_Idle_0
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD020             BEQ.N    ??UserAppSM_Idle_1
   \   00000026   0xD311             BCC.N    ??UserAppSM_Idle_2
   \   00000028   0x2803             CMP      R0,#+3
   \   0000002A   0xD01E             BEQ.N    ??UserAppSM_Idle_3
   \   0000002C   0xE029             B.N      ??UserAppSM_Idle_4
    187            {
    188            case DEMO:  
    189              UserAppSM_DoDemoMode();
   \                     ??UserAppSM_Idle_0: (+1)
   \   0000002E   0x.... 0x....      BL       UserAppSM_DoDemoMode
    190              for(u8 u8Index=0; u8Index < LED_NUM; u8Index++)
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??UserAppSM_Idle_5: (+1)
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x2808             CMP      R0,#+8
   \   00000038   0xDA07             BGE.N    ??UserAppSM_Idle_6
    191              {
    192                UserApp_LedOnOffTimeType[u8Index].u32Counter = 0;
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x....             LDR.N    R2,??DataTable5_3
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000044   0x60D1             STR      R1,[R2, #+12]
    193              }
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0xE7F4             B.N      ??UserAppSM_Idle_5
    194              break;
   \                     ??UserAppSM_Idle_6: (+1)
   \   0000004A   0xE01A             B.N      ??UserAppSM_Idle_4
    195              
    196            case USER:
    197              if(0 == u8Configed)
   \                     ??UserAppSM_Idle_2: (+1)
   \   0000004C   0x....             LDR.N    R0,??DataTable5_4
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD103             BNE.N    ??UserAppSM_Idle_7
    198              {
    199                DebugPrintf(u8String);
   \   00000054   0xA800             ADD      R0,SP,#+0
   \   00000056   0x.... 0x....      BL       DebugPrintf
   \   0000005A   0xE004             B.N      ??UserAppSM_Idle_8
    200              }
    201              else
    202              {
    203                UserAppSM_DoUserMode();
   \                     ??UserAppSM_Idle_7: (+1)
   \   0000005C   0x.... 0x....      BL       UserAppSM_DoUserMode
    204                u8Counter = 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x....             LDR.N    R1,??DataTable5_5
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    205              }
    206              break;
   \                     ??UserAppSM_Idle_8: (+1)
   \   00000066   0xE00C             B.N      ??UserAppSM_Idle_4
    207              
    208            case PAUSE:
    209              break;
   \                     ??UserAppSM_Idle_1: (+1)
   \   00000068   0xE00B             B.N      ??UserAppSM_Idle_4
    210              
    211            case DARK:
    212              for(u8 u8Index=0; u8Index < LED_NUM; u8Index++)
   \                     ??UserAppSM_Idle_3: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??UserAppSM_Idle_9: (+1)
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x2808             CMP      R0,#+8
   \   00000070   0xDA07             BGE.N    ??UserAppSM_Idle_10
    213              {
    214                UserApp_LedContrlType[u8Index].u16PwmValue = 0;
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x....             LDR.N    R2,??DataTable5_6
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000007C   0x8051             STRH     R1,[R2, #+2]
    215              }
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \   00000080   0xE7F4             B.N      ??UserAppSM_Idle_9
    216              break;
    217              
    218            }
    219            
    220            /*Led Action*/
    221            for(u8 u8Index=0; u8Index < LED_NUM; u8Index++)
   \                     ??UserAppSM_Idle_10: (+1)
   \                     ??UserAppSM_Idle_4: (+1)
   \   00000082   0x2400             MOVS     R4,#+0
   \                     ??UserAppSM_Idle_11: (+1)
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0x2C08             CMP      R4,#+8
   \   00000088   0xDA0E             BGE.N    ??UserAppSM_Idle_12
    222            {
    223              LedPWM(UserApp_LedContrlType[u8Index].u8Led, UserApp_LedContrlType[u8Index].u16PwmValue);
                            ^
Warning[Pe188]: enumerated type mixed with another type

      LedPWM(UserApp_LedContrlType[u8Index].u8Led, UserApp_LedContrlType[u8Index].u16PwmValue);
                                                   ^
"D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpg_common\application\user_app.c",223  Warning[Pe188]: 
          enumerated type mixed with another type
   \   0000008A   0x....             LDR.N    R0,??DataTable5_6
   \   0000008C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008E   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000092   0xF9B0 0x1002      LDRSH    R1,[R0, #+2]
   \   00000096   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000098   0x....             LDR.N    R0,??DataTable5_6
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0xF810 0x0024      LDRB     R0,[R0, R4, LSL #+2]
   \   000000A0   0x.... 0x....      BL       LedPWM
    224            }
   \   000000A4   0x1C64             ADDS     R4,R4,#+1
   \   000000A6   0xE7ED             B.N      ??UserAppSM_Idle_11
    225           
    226          #endif
    227          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_12: (+1)
   \   000000A8   0xB00A             ADD      SP,SP,#+40
   \   000000AA   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??u8Mode:
   \   00000000                      DS8 1
    228          
    229          
    230          #if PROGRAMMINGG_COMPETITION
    231          /*-------------------------------------------------------------------------------------------------------------------*/
    232          /* UserAppSM_ConfigEfashion */

   \                                 In section .text, align 2, keep-with-next
    233          static void UserAppSM_ConfigEfashion(void)
    234          {
    235            ;//receive the cmd
    236          }
   \                     UserAppSM_ConfigEfashion: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    237          
    238          
    239          /*-------------------------------------------------------------------------------------------------------------------*/
    240          /* UserAppSM_DoUserMode */

   \                                 In section .text, align 2, keep-with-next
    241          static void UserAppSM_DoUserMode(void)
    242          {
    243            for(u8 u8Index=0; u8Index < LED_NUM; u8Index++)
   \                     UserAppSM_DoUserMode: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \                     ??UserAppSM_DoUserMode_0: (+1)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2808             CMP      R0,#+8
   \   00000006   0xDA38             BGE.N    ??UserAppSM_DoUserMode_1
    244            {
    245              UserApp_LedOnOffTimeType[u8Index].u32Counter++;
   \   00000008   0x....             LDR.N    R1,??DataTable5_3
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000010   0x68C9             LDR      R1,[R1, #+12]
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0x....             LDR.N    R2,??DataTable5_3
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   0000001C   0x60D1             STR      R1,[R2, #+12]
    246              
    247              if(UserApp_LedOnOffTimeType[u8Index].u32Counter < UserApp_LedOnOffTimeType[u8Index].u32OnTime)
   \   0000001E   0x....             LDR.N    R1,??DataTable5_3
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   00000026   0x68C9             LDR      R1,[R1, #+12]
   \   00000028   0x....             LDR.N    R2,??DataTable5_3
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000030   0x6852             LDR      R2,[R2, #+4]
   \   00000032   0x4291             CMP      R1,R2
   \   00000034   0xD206             BCS.N    ??UserAppSM_DoUserMode_2
    248              {
    249                UserApp_LedContrlType[u8Index].u16PwmValue = 0;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x....             LDR.N    R2,??DataTable5_6
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000040   0x8051             STRH     R1,[R2, #+2]
   \   00000042   0xE018             B.N      ??UserAppSM_DoUserMode_3
    250              }
    251              else if(UserApp_LedOnOffTimeType[u8Index].u32Counter <= UserApp_LedOnOffTimeType[u8Index].u32OffTime)
   \                     ??UserAppSM_DoUserMode_2: (+1)
   \   00000044   0x....             LDR.N    R1,??DataTable5_3
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0xEB11 0x1100      ADDS     R1,R1,R0, LSL #+4
   \   0000004C   0x6889             LDR      R1,[R1, #+8]
   \   0000004E   0x....             LDR.N    R2,??DataTable5_3
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000056   0x68D2             LDR      R2,[R2, #+12]
   \   00000058   0x4291             CMP      R1,R2
   \   0000005A   0xD306             BCC.N    ??UserAppSM_DoUserMode_4
    252              {
    253                UserApp_LedContrlType[u8Index].u16PwmValue = 100;
   \   0000005C   0x2164             MOVS     R1,#+100
   \   0000005E   0x....             LDR.N    R2,??DataTable5_6
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000066   0x8051             STRH     R1,[R2, #+2]
   \   00000068   0xE005             B.N      ??UserAppSM_DoUserMode_3
    254              }
    255              else
    256              {
    257                UserApp_LedOnOffTimeType[u8Index].u32Counter = 0;
   \                     ??UserAppSM_DoUserMode_4: (+1)
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x....             LDR.N    R2,??DataTable5_3
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   00000074   0x60D1             STR      R1,[R2, #+12]
    258              }
    259            }
   \                     ??UserAppSM_DoUserMode_3: (+1)
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0xE7C3             B.N      ??UserAppSM_DoUserMode_0
    260          }
   \                     ??UserAppSM_DoUserMode_1: (+1)
   \   0000007A   0x4770             BX       LR               ;; return
    261          
    262          /*-------------------------------------------------------------------------------------------------------------------*/
    263          /* UserAppSM_DoDemoMode */

   \                                 In section .text, align 2, keep-with-next
    264          static void UserAppSM_DoDemoMode(void)
    265          {
    266            static u8  u8NextLed  = WHITE;
    267            
    268            u8Counter++;
   \                     UserAppSM_DoDemoMode: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_5
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable5_5
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    269            if(u8NextLed == LED_NUM)
   \   0000000A   0x....             LDR.N    R0,??DataTable5_7
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2808             CMP      R0,#+8
   \   00000010   0xD103             BNE.N    ??UserAppSM_DoDemoMode_0
    270            {
    271              u8NextLed = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable5_7
   \   00000016   0x7008             STRB     R0,[R1, #+0]
   \   00000018   0xE019             B.N      ??UserAppSM_DoDemoMode_1
    272            }
    273            else
    274            {
    275              if(0 == (u8Counter % 100))
   \                     ??UserAppSM_DoDemoMode_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable5_5
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2164             MOVS     R1,#+100
   \   00000020   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000024   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD110             BNE.N    ??UserAppSM_DoDemoMode_1
    276              {
    277                u16Pwm += 10;
   \   0000002C   0x....             LDR.N    R0,??DataTable5_8
   \   0000002E   0x8800             LDRH     R0,[R0, #+0]
   \   00000030   0x300A             ADDS     R0,R0,#+10
   \   00000032   0x....             LDR.N    R1,??DataTable5_8
   \   00000034   0x8008             STRH     R0,[R1, #+0]
    278          
    279                if(u16Pwm >= 100)
   \   00000036   0x....             LDR.N    R0,??DataTable5_8
   \   00000038   0x8800             LDRH     R0,[R0, #+0]
   \   0000003A   0x2864             CMP      R0,#+100
   \   0000003C   0xDB07             BLT.N    ??UserAppSM_DoDemoMode_1
    280                {
    281                  u16Pwm = 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable5_8
   \   00000042   0x8008             STRH     R0,[R1, #+0]
    282                  u8NextLed++;
   \   00000044   0x....             LDR.N    R0,??DataTable5_7
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x....             LDR.N    R1,??DataTable5_7
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    283                }
    284              }
    285            }
    286            
    287             /*Led Pwm Value*/
    288            for(u8 u8Index=0; u8Index < LED_NUM; u8Index++)
   \                     ??UserAppSM_DoDemoMode_1: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??UserAppSM_DoDemoMode_2: (+1)
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x2808             CMP      R0,#+8
   \   00000054   0xDA14             BGE.N    ??UserAppSM_DoDemoMode_3
    289            {
    290              if(u8Index == u8NextLed)
   \   00000056   0x....             LDR.N    R1,??DataTable5_7
   \   00000058   0x7809             LDRB     R1,[R1, #+0]
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD107             BNE.N    ??UserAppSM_DoDemoMode_4
    291              {
    292                UserApp_LedContrlType[u8Index].u16PwmValue = u16Pwm;
   \   00000060   0x....             LDR.N    R1,??DataTable5_8
   \   00000062   0x8809             LDRH     R1,[R1, #+0]
   \   00000064   0x....             LDR.N    R2,??DataTable5_6
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000006C   0x8051             STRH     R1,[R2, #+2]
   \   0000006E   0xE005             B.N      ??UserAppSM_DoDemoMode_5
    293              }
    294              else
    295              {
    296                UserApp_LedContrlType[u8Index].u16PwmValue = 0;
   \                     ??UserAppSM_DoDemoMode_4: (+1)
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x....             LDR.N    R2,??DataTable5_6
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   0000007A   0x8051             STRH     R1,[R2, #+2]
    297              }
    298            }
   \                     ??UserAppSM_DoDemoMode_5: (+1)
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0xE7E7             B.N      ??UserAppSM_DoDemoMode_2
    299          }
   \                     ??UserAppSM_DoDemoMode_3: (+1)
   \   00000080   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 1
   \                     ??u8NextLed:
   \   00000000                      DS8 1
    300          /*-------------------------------------------------------------------------------------------------------------------*/
    301          /* UserAppSM_GetMode */

   \                                 In section .text, align 2, keep-with-next
    302          static u8 UserAppSM_GetMode(void)
    303          {
   \                     UserAppSM_GetMode: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    304            u8  u8Mode;
    305            u8  u8Verify = 0;
   \   00000002   0x2500             MOVS     R5,#+0
    306            static u8 u8ModePre  = DEMO;
    307            static u8 u8ModePre2 = DEMO;
    308            static u8 u8Button2Flag = 0; 
    309            static u8 u8Button3Flag = 0;
    310             
    311            /*DEMO*/
    312            if(IsButtonPressed(BUTTON0))
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       IsButtonPressed
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD004             BEQ.N    ??UserAppSM_GetMode_0
    313            {
    314              u8Verify++;
   \   0000000E   0x1C6D             ADDS     R5,R5,#+1
    315              u8Mode = DEMO;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0004             MOVS     R4,R0
    316              u8ModePre = u8Mode;
   \   00000014   0x....             LDR.N    R0,??DataTable5_9
   \   00000016   0x7004             STRB     R4,[R0, #+0]
    317            }
    318            
    319            /*USER*/
    320            if(IsButtonPressed(BUTTON1))
   \                     ??UserAppSM_GetMode_0: (+1)
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       IsButtonPressed
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD004             BEQ.N    ??UserAppSM_GetMode_1
    321            {
    322              u8Verify++;
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
    323              u8Mode = USER;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x0004             MOVS     R4,R0
    324              u8ModePre = u8Mode;
   \   00000028   0x....             LDR.N    R0,??DataTable5_9
   \   0000002A   0x7004             STRB     R4,[R0, #+0]
    325            }
    326               
    327            /*PAUSE*/
    328            if(IsButtonPressed(BUTTON2))
   \                     ??UserAppSM_GetMode_1: (+1)
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       IsButtonPressed
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD016             BEQ.N    ??UserAppSM_GetMode_2
    329            {
    330                u8Verify++;
   \   00000036   0x1C6D             ADDS     R5,R5,#+1
    331                u8Button2Flag++;
   \   00000038   0x....             LDR.N    R0,??DataTable5_10
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable5_10
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    332                if(1 == u8Button2Flag)      /*BUTTON3 is Fist time to press*/
   \   00000042   0x....             LDR.N    R0,??DataTable5_10
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD102             BNE.N    ??UserAppSM_GetMode_3
    333                {
    334                  u8Mode = PAUSE;
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x0004             MOVS     R4,R0
   \   0000004E   0xE009             B.N      ??UserAppSM_GetMode_2
    335                }
    336                else if(2 == u8Button2Flag) /*BUTTON3 is second time to press*/
   \                     ??UserAppSM_GetMode_3: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable5_10
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x2802             CMP      R0,#+2
   \   00000056   0xD105             BNE.N    ??UserAppSM_GetMode_2
    337                {
    338                  u8Button2Flag = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x....             LDR.N    R1,??DataTable5_10
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    339                  u8Mode = u8ModePre;
   \   0000005E   0x....             LDR.N    R0,??DataTable5_9
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x0004             MOVS     R4,R0
    340                }
    341            }
    342            
    343            /*DARK*/
    344            if(IsButtonPressed(BUTTON3))
   \                     ??UserAppSM_GetMode_2: (+1)
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x.... 0x....      BL       IsButtonPressed
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD01A             BEQ.N    ??UserAppSM_GetMode_4
    345            {
    346              if(0 == u8Button2Flag)        /*if the mode is PAUSE, button4 is not used*/
   \   0000006E   0x....             LDR.N    R0,??DataTable5_10
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD116             BNE.N    ??UserAppSM_GetMode_4
    347              {
    348                u8Verify++;
   \   00000076   0x1C6D             ADDS     R5,R5,#+1
    349                u8Button3Flag++;
   \   00000078   0x....             LDR.N    R0,??DataTable5_11
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0x....             LDR.N    R1,??DataTable5_11
   \   00000080   0x7008             STRB     R0,[R1, #+0]
    350                
    351                if(1 == u8Button3Flag)      /*BUTTON3 is Fist time to press*/
   \   00000082   0x....             LDR.N    R0,??DataTable5_11
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x2801             CMP      R0,#+1
   \   00000088   0xD102             BNE.N    ??UserAppSM_GetMode_5
    352                {
    353                  u8Mode = PAUSE;
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x0004             MOVS     R4,R0
   \   0000008E   0xE009             B.N      ??UserAppSM_GetMode_4
    354                }
    355                else if(2 == u8Button3Flag) /*BUTTON3 is second time to press*/
   \                     ??UserAppSM_GetMode_5: (+1)
   \   00000090   0x....             LDR.N    R0,??DataTable5_11
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0x2802             CMP      R0,#+2
   \   00000096   0xD105             BNE.N    ??UserAppSM_GetMode_4
    356                {
    357                  u8Button3Flag = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x....             LDR.N    R1,??DataTable5_11
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    358                  u8Mode = u8ModePre;
   \   0000009E   0x....             LDR.N    R0,??DataTable5_9
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x0004             MOVS     R4,R0
    359                }
    360              }
    361            }
    362            
    363            if(u8Verify > 1)
   \                     ??UserAppSM_GetMode_4: (+1)
   \   000000A4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A6   0x2D02             CMP      R5,#+2
   \   000000A8   0xDB02             BLT.N    ??UserAppSM_GetMode_6
    364            {
    365              u8Mode = u8ModePre2;          /*error*/
   \   000000AA   0x....             LDR.N    R0,??DataTable5_12
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0x0004             MOVS     R4,R0
    366            }
    367            
    368            u8ModePre2 = u8Mode;
   \                     ??UserAppSM_GetMode_6: (+1)
   \   000000B0   0x....             LDR.N    R0,??DataTable5_12
   \   000000B2   0x7004             STRB     R4,[R0, #+0]
    369            
    370            return u8Mode;
   \   000000B4   0x0020             MOVS     R0,R4
   \   000000B6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    371          }

   \                                 In section .bss, align 1
   \                     ??u8ModePre:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8ModePre2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8Button2Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8Button3Flag:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ??u8Mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     UserApp_LedOnOffTimeType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     u8Configed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     u8Counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     UserApp_LedContrlType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ??u8NextLed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     u16Pwm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     ??u8ModePre

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     ??u8Button2Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     ??u8Button3Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     ??u8ModePre2

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x59 0x6F          DC8 "You have not config your efashion "
   \              0x75 0x20    
   \              0x68 0x61    
   \              0x76 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x66 0x69    
   \              0x67 0x20    
   \              0x79 0x6F    
   \              0x75 0x72    
   \              0x20 0x65    
   \              0x66 0x61    
   \              0x73 0x68    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0
    372          #endif
    373          
    374          
    375          /*-------------------------------------------------------------------------------------------------------------------*/
    376          /* Handle an error */
    377          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpg_common\application\user_app.c",61  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    378          {
    379            UserApp_StateMachine = UserAppSM_Idle;
    380            
    381          } /* end UserAppSM_Error() */
    382          
    383          
    384          /*-------------------------------------------------------------------------------------------------------------------*/
    385          /* State to sit in if init failed */
    386          static void UserAppSM_FailedInit(void)          
    387          {
    388              
    389          } /* end UserAppSM_FailedInit() */
    390          
    391          
    392          /*--------------------------------------------------------------------------------------------------------------------*/
    393          /* End of File                                                                                                        */
    394          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LedAllOff
         8   -> LedOff
       0   UserAppInitialize
       8   UserAppRunActiveState
         8   -- Indirect call
       0   UserAppSM_ConfigEfashion
       0   UserAppSM_DoDemoMode
       0   UserAppSM_DoUserMode
      16   UserAppSM_GetMode
        16   -> IsButtonPressed
      48   UserAppSM_Idle
        48   -> DebugPrintf
        48   -> LedPWM
        48   -> UserAppSM_ConfigEfashion
        48   -> UserAppSM_DoDemoMode
        48   -> UserAppSM_DoUserMode
        48   -> UserAppSM_GetMode
        48   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      36  ?_0
       4  G_u32UserAppFlags
      52  LedAllOff
      10  UserAppInitialize
      10  UserAppRunActiveState
       2  UserAppSM_ConfigEfashion
     130  UserAppSM_DoDemoMode
     124  UserAppSM_DoUserMode
     186  UserAppSM_GetMode
     172  UserAppSM_Idle
      32  UserApp_LedContrlType
     128  UserApp_LedOnOffTimeType
       4  UserApp_StateMachine
       2  u16Pwm
       1  u8Button2Flag
       1  u8Button3Flag
       1  u8Configed
       1  u8Counter
       1  u8Mode
       1  u8ModePre
       1  u8ModePre2
       1  u8NextLed

 
  18 bytes in section .bss
 160 bytes in section .data
  36 bytes in section .rodata
 738 bytes in section .text
 
 738 bytes of CODE  memory
  36 bytes of CONST memory
 178 bytes of DATA  memory

Errors: none
Warnings: 4
