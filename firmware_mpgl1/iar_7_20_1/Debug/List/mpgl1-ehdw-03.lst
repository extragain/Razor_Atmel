###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        25/Feb/2017  02:02:22
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\bsp\mpgl1-ehdw-03.c
#    Command line =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\bsp\mpgl1-ehdw-03.c
#        --preprocess=cl
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\mpgl1-ehdw-03.lst
#    Object file  =  
#        D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\mpgl1-ehdw-03.o
#
###############################################################################

D:\001.EIE\资料\固件\Razor_Atmel\Razor_Atmel\firmware_mpgl1\bsp\mpgl1-ehdw-03.c
      1          /***********************************************************************************************************************
      2          File: mpgl1-ehdw-03.c                                                                
      3          
      4          Description:
      5          This file provides core and GPIO functions for the mpgl1-ehdw-03 board.
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32SystemTime1ms;                       /* Global system time incremented every ms, max 2^32 (~49 days) */
   \                     G_u32SystemTime1ms:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          volatile u32 G_u32SystemTime1s;                        /* Global system time incremented every second, max 2^32 (~136 years) */
   \                     G_u32SystemTime1s:
   \   00000000                      DS8 4
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     21          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     22          
     23          extern u32 G_u32DebugFlags;                            /* From debug.c */
     24          
     25          
     26          /***********************************************************************************************************************
     27          Global variable definitions with scope limited to this local application.
     28          Variable names shall start with "Bsp_" and be declared as static.
     29          ***********************************************************************************************************************/
     30          static u32 Bsp_u32TimingViolationsCounter = 0;
                            ^
Warning[Pe177]: variable "Bsp_u32TimingViolationsCounter" was declared but
          never referenced
     31          
     32          
     33          /***********************************************************************************************************************
     34          Function Definitions
     35          ***********************************************************************************************************************/
     36          
     37          /*--------------------------------------------------------------------------------------------------------------------*/
     38          /* Public Functions */
     39          /*--------------------------------------------------------------------------------------------------------------------*/
     40          
     41          
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          /* Protected Functions */
     44          /*--------------------------------------------------------------------------------------------------------------------*/
     45          
     46          /*----------------------------------------------------------------------------------------------------------------------
     47          Function: ClockSetup
     48          
     49          Description:
     50          Loads all registers required to set up the processor clocks.
     51          
     52          Requires:
     53            - Built-in 32kHz slow clock is active to time out the fast clock startup time
     54          
     55          Promises:
     56            - EFC is set up with proper flash access wait states based on 48MHz system clock
     57            - PMC is set up with proper oscillators and clock sources
     58          */

   \                                 In section .text, align 2, keep-with-next
     59          void ClockSetup(void)
     60          {
     61          #ifndef SIMULATOR_MODE
     62            /* Activate the peripheral clocks needed for the system */
     63            AT91C_BASE_PMC->PMC_PCER = PMC_PCER_INIT;
     64          
     65            /* Enable the master clock on the PKC0 clock out pin (PA_27_CLOCK_OUT) */
     66            AT91C_BASE_PMC->PMC_PCKR[0] = AT91C_PMC_CSS_SYS_CLK | AT91C_PMC_PRES_CLK;
     67            AT91C_BASE_PMC->PMC_SCER = AT91C_PMC_PCK0;
     68          
     69            /* Turn on the main oscillator and wait for it to start up */
     70            AT91C_BASE_PMC->PMC_MOR = PMC_MOR_INIT;
     71            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCXTS) );
     72          
     73            /* Assign main clock as crystal */
     74            AT91C_BASE_PMC->PMC_MOR |= (AT91C_CKGR_MOSCSEL | MOR_KEY);
     75            
     76            /* Initialize PLLA and wait for lock */
     77            AT91C_BASE_PMC->PMC_PLLAR = PMC_PLAAR_INIT;
     78            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCKA) );
     79            
     80            /* Set flash wait states to allow 48 MHz system clock (2 wait states required) */
     81            AT91C_BASE_EFC0->EFC_FMR = AT91C_EFC_FWS_2WS;
     82          //  AT91C_BASE_EFC1->EFC_FMR = AT91C_EFC_FWS_2WS;
     83          
     84            /* Assign the PLLA as the main system clock with prescaler active using the sequence suggested on pg. 472 */
     85            AT91C_BASE_PMC->PMC_MCKR = PMC_MCKR_INIT;
     86            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) );
     87            AT91C_BASE_PMC->PMC_MCKR = PMC_MCKR_PLLA;
     88            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) );
     89          
     90            /* Initialize UTMI for USB usage */
     91            AT91C_BASE_CKGR->CKGR_UCKR |= (AT91C_CKGR_UPLLCOUNT & (3 << 20)) | AT91C_CKGR_UPLLEN;
     92            while ( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCKU) );
     93          #endif  
     94            
     95            
     96          } /* end ClockSetup */
   \                     ClockSetup: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     97          
     98          
     99          /*----------------------------------------------------------------------------------------------------------------------
    100          Function: SysTickSetup
    101          
    102          Description:
    103          Initializes the 1ms and 1s System Ticks off the core timer.
    104          
    105          Requires:
    106            - NVIC is setup and SysTick handler is installed
    107          
    108          Promises:
    109            - Both system timers are set and the SysTick core peripheral is configured for 1ms intervals
    110          */

   \                                 In section .text, align 2, keep-with-next
    111          void SysTickSetup(void)
    112          {
    113            G_u32SystemTime1ms = 0;      
   \                     SysTickSetup: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable6
   \   00000004   0x6008             STR      R0,[R1, #+0]
    114            G_u32SystemTime1s  = 0;   
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable6_1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    115            
    116            /* Load the SysTick Counter Value */
    117            AT91C_BASE_NVIC->NVIC_STICKRVR   = (u32)SYSTICK_COUNT - 1; /* Check value */
   \   0000000C   0xF241 0x706F      MOVW     R0,#+5999
   \   00000010   0x....             LDR.N    R1,??DataTable6_2  ;; 0xe000e014
   \   00000012   0x6008             STR      R0,[R1, #+0]
    118            AT91C_BASE_NVIC->NVIC_STICKCVR   = (0x00);                                                              
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable6_3  ;; 0xe000e018
   \   00000018   0x6008             STR      R0,[R1, #+0]
    119            AT91C_BASE_NVIC->NVIC_STICKCSR   = SYSTICK_CTRL_INIT;
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x....             LDR.N    R1,??DataTable6_4  ;; 0xe000e010
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    120           
    121          } /* end SysTickSetup() */
   \   00000020   0x4770             BX       LR               ;; return
    122          
    123          
    124          /*----------------------------------------------------------------------------------------------------------------------
    125          Function: SystemSleep
    126          
    127          Description:
    128          Puts the system into sleep mode.  Deep sleep mode is currently disabled, so
    129          maximum processor power savings are not yet realized.  To enable deep sleep,
    130          there are certain considerations for waking up that must be taken care of.
    131          
    132          Requires:
    133            - SysTick is running with interrupt enabled for wake from Sleep LPM
    134            - RTC 1 second alarm running with interrupt for wake from Stop LPM
    135          
    136          Promises:
    137            - Configures processor for maximum sleep while still allowing any required
    138              interrupt to wake it up.
    139          */

   \                                 In section .text, align 2, keep-with-next
    140          void SystemSleep(void)
    141          {    
    142          #ifndef SIMULATOR_MODE
    143             static u32 u32PreviousSystemTick = 0;
    144             static u8 au8TickWarningMessage[] = "\n\r*** 1ms timing violation: ";   
    145             
    146            /* Check system timing */
    147            if( (G_u32SystemTime1ms - u32PreviousSystemTick) != 1)
    148            {
    149              /* Flag, count and optionally display warning */
    150              Bsp_u32TimingViolationsCounter++;
    151              G_u32SystemFlags |= _SYSTEM_TIME_WARNING;
    152              if(G_u32DebugFlags & _DEBUG_TIME_WARNING_ENABLE)
    153              {
    154                DebugPrintf(au8TickWarningMessage);
    155                DebugPrintNumber(Bsp_u32TimingViolationsCounter);
    156                DebugLineFeed();
    157              }
    158            }
    159            
    160            u32PreviousSystemTick = G_u32SystemTime1ms;
    161             
    162            /* Set the system control register for Sleep (but not Deep Sleep) */
    163             AT91C_BASE_PMC->PMC_FSMR &= ~AT91C_PMC_LPM;
    164             AT91C_BASE_NVIC->NVIC_SCR &= ~AT91C_NVIC_SLEEPDEEP;
    165             
    166             /* Set the sleep flag (cleared only in SysTick ISR */
    167             G_u32SystemFlags |= _SYSTEM_SLEEPING;
    168          
    169            /* Now enter the selected LPM */
    170             while(G_u32SystemFlags & _SYSTEM_SLEEPING)
    171             {
    172               __WFI();
    173             }
    174             
    175            /* Clear the sleep mode status flags */
    176            //AT91C_SC->PCON &= SLEEP_MODE_STATUS_CLEAR;
    177          
    178          #else
    179             /* Manually kill about a ms of time (12000 cycles with 7 instruction loop)*/
    180             for(u32 i = 0; i < 1700; i++);
   \                     SystemSleep: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \                     ??SystemSleep_0: (+1)
   \   00000002   0xF240 0x61A4      MOVW     R1,#+1700
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD201             BCS.N    ??SystemSleep_1
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0xE7F9             B.N      ??SystemSleep_0
    181             
    182          #endif /* SIMULATOR_MODE */
    183            
    184          } /* end SystemSleep(void) */
   \                     ??SystemSleep_1: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    185          
    186          
    187          /*----------------------------------------------------------------------------------------------------------------------
    188          Function: WatchDogSetup
    189          
    190          Description:
    191          Configures the watchdog timer.  The dog runs at 32.768kHz from the slow built-in RC clock source which varies over operating conditions from 30kHz to 60kHz.
    192          Since the main loop time / sleep time should be 1 ms most of the time, choosing a value
    193          of 5 seconds should be plenty to avoid watchdog resets.  
    194          
    195          Note: the processor allows the MR register to be written just once.
    196          
    197          Requires:
    198            - SCLK is active at about 32.768kHz
    199          
    200          Promises:
    201            - Watchdog is set for 5 second timeout but not yet enabled
    202          */

   \                                 In section .text, align 2, keep-with-next
    203          void WatchDogSetup(void)
    204          {
    205            AT91C_BASE_WDTC->WDTC_WDMR = WDT_MR_INIT;
   \                     WatchDogSetup: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_5  ;; 0x10018500
   \   00000002   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400e1254
   \   00000004   0x6008             STR      R0,[R1, #+0]
    206            WATCHDOG_BONE();
   \   00000006   0x....             LDR.N    R0,??DataTable6_7  ;; 0xa5000001
   \   00000008   0x....             LDR.N    R1,??DataTable6_8  ;; 0x400e1250
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    207           
    208          } /* end WatchDogSetup() */
   \   0000000C   0x4770             BX       LR               ;; return
    209          
    210          
    211          /*----------------------------------------------------------------------------------------------------------------------
    212          Function: GpioSetup
    213          
    214          Description
    215          Loads all registers required to set up GPIO on the processor.
    216          
    217          Requires:
    218            - All configurations must match connected hardware.
    219          
    220          Promises:
    221            - All I/O lines are set for their required function and start-state
    222          */

   \                                 In section .text, align 2, keep-with-next
    223          void GpioSetup(void)
    224          {
   \                     GpioSetup: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    225            /* Set all of the pin function registers in port A */
    226            AT91C_BASE_PIOA->PIO_PER    = PIOA_PER_INIT;
   \   00000002   0x....             LDR.N    R0,??DataTable6_9  ;; 0x84030007
   \   00000004   0x....             LDR.N    R1,??DataTable6_10  ;; 0x400e0c00
   \   00000006   0x6008             STR      R0,[R1, #+0]
    227            AT91C_BASE_PIOA->PIO_PDR    = PIOA_PDR_INIT;
   \   00000008   0x....             LDR.N    R0,??DataTable6_11  ;; 0x7bfcfff8
   \   0000000A   0x....             LDR.N    R1,??DataTable6_12  ;; 0x400e0c04
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    228            AT91C_BASE_PIOA->PIO_OER    = PIOA_OER_INIT;
   \   0000000E   0x....             LDR.N    R0,??DataTable6_13  ;; 0xbf55d7f9
   \   00000010   0x....             LDR.N    R1,??DataTable6_14  ;; 0x400e0c10
   \   00000012   0x6008             STR      R0,[R1, #+0]
    229            AT91C_BASE_PIOA->PIO_ODR    = PIOA_ODR_INIT;
   \   00000014   0x....             LDR.N    R0,??DataTable6_15  ;; 0x40aa2806
   \   00000016   0x....             LDR.N    R1,??DataTable6_16  ;; 0x400e0c14
   \   00000018   0x6008             STR      R0,[R1, #+0]
    230            AT91C_BASE_PIOA->PIO_IFER   = PIOA_IFER_INIT;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR.N    R1,??DataTable6_17  ;; 0x400e0c20
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    231            AT91C_BASE_PIOA->PIO_IFDR   = PIOA_IFDR_INIT;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable6_18  ;; 0x400e0c24
   \   00000024   0x6008             STR      R0,[R1, #+0]
    232            AT91C_BASE_PIOA->PIO_SODR   = PIOA_SODR_INIT;
   \   00000026   0x....             LDR.N    R0,??DataTable6_19  ;; 0x88010000
   \   00000028   0x....             LDR.N    R1,??DataTable6_20  ;; 0x400e0c30
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    233            AT91C_BASE_PIOA->PIO_CODR   = PIOA_CODR_INIT;
   \   0000002C   0xF05F 0x5040      MOVS     R0,#+805306368
   \   00000030   0x....             LDR.N    R1,??DataTable6_21  ;; 0x400e0c34
   \   00000032   0x6008             STR      R0,[R1, #+0]
    234            AT91C_BASE_PIOA->PIO_MDER   = PIOA_MDER_INIT;
   \   00000034   0x....             LDR.N    R0,??DataTable6_22  ;; 0x4000600
   \   00000036   0x....             LDR.N    R1,??DataTable6_23  ;; 0x400e0c50
   \   00000038   0x6008             STR      R0,[R1, #+0]
    235            AT91C_BASE_PIOA->PIO_MDDR   = PIOA_MDDR_INIT;
   \   0000003A   0x....             LDR.N    R0,??DataTable6_24  ;; 0xfbfff9ff
   \   0000003C   0x....             LDR.N    R1,??DataTable6_25  ;; 0x400e0c54
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    236            AT91C_BASE_PIOA->PIO_PPUDR  = PIOA_PPUDR_INIT;
   \   00000040   0xF07F 0x0001      MVNS     R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable6_26  ;; 0x400e0c60
   \   00000046   0x6008             STR      R0,[R1, #+0]
    237            AT91C_BASE_PIOA->PIO_PPUER  = PIOA_PPUER_INIT;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x....             LDR.N    R1,??DataTable6_27  ;; 0x400e0c64
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    238            AT91C_BASE_PIOA->PIO_ABSR   = PIOA_ABSR_INIT;
   \   0000004E   0xF05F 0x40F6      MOVS     R0,#+2063597568
   \   00000052   0x....             LDR.N    R1,??DataTable6_28  ;; 0x400e0c70
   \   00000054   0x6008             STR      R0,[R1, #+0]
    239            AT91C_BASE_PIOA->PIO_SCIFSR = PIOA_SCIFSR_INIT;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR.N    R1,??DataTable6_29  ;; 0x400e0c80
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    240            AT91C_BASE_PIOA->PIO_DIFSR  = PIOA_DIFSR_INIT;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x....             LDR.N    R1,??DataTable6_30  ;; 0x400e0c84
   \   00000060   0x6008             STR      R0,[R1, #+0]
    241            AT91C_BASE_PIOA->PIO_SCDR   = PIOA_SCDR_INIT;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR.N    R1,??DataTable6_31  ;; 0x400e0c8c
   \   00000066   0x6008             STR      R0,[R1, #+0]
    242            AT91C_BASE_PIOA->PIO_OWER   = PIOA_OWER_INIT;
   \   00000068   0x....             LDR.N    R0,??DataTable6_32  ;; 0xb4010000
   \   0000006A   0x....             LDR.N    R1,??DataTable6_33  ;; 0x400e0ca0
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    243            AT91C_BASE_PIOA->PIO_OWDR   = PIOA_OWDR_INIT;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x....             LDR.N    R1,??DataTable6_34  ;; 0x400e0ca4
   \   00000072   0x6008             STR      R0,[R1, #+0]
    244            
    245            /* Configure port B GPIO */
    246            AT91C_BASE_PIOB->PIO_PER    = PIOB_PER_INIT;
   \   00000074   0x....             LDR.N    R0,??DataTable6_35  ;; 0x1bfffe7
   \   00000076   0x....             LDR.N    R1,??DataTable6_36  ;; 0x400e0e00
   \   00000078   0x6008             STR      R0,[R1, #+0]
    247            AT91C_BASE_PIOB->PIO_PDR    = PIOB_PDR_INIT;
   \   0000007A   0x....             LDR.N    R0,??DataTable6_37  ;; 0x400018
   \   0000007C   0x....             LDR.N    R1,??DataTable6_38  ;; 0x400e0e04
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    248            AT91C_BASE_PIOB->PIO_OER    = PIOB_OER_INIT;
   \   00000080   0x....             LDR.N    R0,??DataTable6_39  ;; 0x1bfffe0
   \   00000082   0x....             LDR.N    R1,??DataTable6_40  ;; 0x400e0e10
   \   00000084   0x6008             STR      R0,[R1, #+0]
    249            AT91C_BASE_PIOB->PIO_ODR    = PIOB_ODR_INIT;
   \   00000086   0x....             LDR.N    R0,??DataTable6_41  ;; 0x40001f
   \   00000088   0x....             LDR.N    R1,??DataTable6_42  ;; 0x400e0e14
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    250            AT91C_BASE_PIOB->PIO_IFER   = PIOB_IFER_INIT;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x....             LDR.N    R1,??DataTable6_43  ;; 0x400e0e20
   \   00000090   0x6008             STR      R0,[R1, #+0]
    251            AT91C_BASE_PIOB->PIO_IFDR   = PIOB_IFDR_INIT;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x....             LDR.N    R1,??DataTable6_44  ;; 0x400e0e24
   \   00000096   0x6008             STR      R0,[R1, #+0]
    252            AT91C_BASE_PIOB->PIO_SODR   = PIOB_SODR_INIT;
   \   00000098   0x....             LDR.N    R0,??DataTable6_45  ;; 0x1bffe00
   \   0000009A   0x....             LDR.N    R1,??DataTable6_46  ;; 0x400e0e30
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    253            AT91C_BASE_PIOB->PIO_CODR   = PIOB_CODR_INIT;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x....             LDR.N    R1,??DataTable6_47  ;; 0x400e0e34
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    254            AT91C_BASE_PIOB->PIO_MDER   = PIOB_MDER_INIT;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x....             LDR.N    R1,??DataTable6_48  ;; 0x400e0e50
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    255            AT91C_BASE_PIOB->PIO_MDDR   = PIOB_MDDR_INIT;
   \   000000AA   0xF07F 0x407E      MVNS     R0,#-33554432
   \   000000AE   0x....             LDR.N    R1,??DataTable6_49  ;; 0x400e0e54
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    256            AT91C_BASE_PIOB->PIO_PPUDR  = PIOB_PPUDR_INIT;
   \   000000B2   0x....             LDR.N    R0,??DataTable6_50  ;; 0x1fffe1f
   \   000000B4   0x....             LDR.N    R1,??DataTable6_51  ;; 0x400e0e60
   \   000000B6   0x6008             STR      R0,[R1, #+0]
    257            AT91C_BASE_PIOB->PIO_PPUER  = PIOB_PPUER_INIT;
   \   000000B8   0xF44F 0x70F0      MOV      R0,#+480
   \   000000BC   0x....             LDR.N    R1,??DataTable6_52  ;; 0x400e0e64
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    258            AT91C_BASE_PIOB->PIO_ABSR   = PIOB_ABSR_INIT;
   \   000000C0   0x....             LDR.N    R0,??DataTable6_37  ;; 0x400018
   \   000000C2   0x....             LDR.N    R1,??DataTable6_53  ;; 0x400e0e70
   \   000000C4   0x6008             STR      R0,[R1, #+0]
    259            AT91C_BASE_PIOB->PIO_SCIFSR = PIOB_SCIFSR_INIT;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x....             LDR.N    R1,??DataTable6_54  ;; 0x400e0e80
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    260            AT91C_BASE_PIOB->PIO_DIFSR  = PIOB_DIFSR_INIT;
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x....             LDR.N    R1,??DataTable6_55  ;; 0x400e0e84
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    261            AT91C_BASE_PIOB->PIO_SCDR   = PIOB_SCDR_INIT;
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x....             LDR.N    R1,??DataTable6_56  ;; 0x400e0e8c
   \   000000D6   0x6008             STR      R0,[R1, #+0]
    262            AT91C_BASE_PIOB->PIO_OWER   = PIOB_OWER_INIT;
   \   000000D8   0x....             LDR.N    R0,??DataTable6_57  ;; 0x1fffe0
   \   000000DA   0x....             LDR.N    R1,??DataTable6_58  ;; 0x400e0ea0
   \   000000DC   0x6008             STR      R0,[R1, #+0]
    263            AT91C_BASE_PIOB->PIO_OWDR   = PIOB_OWDR_INIT;
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0x....             LDR.N    R1,??DataTable6_59  ;; 0x400e0ea4
   \   000000E2   0x6008             STR      R0,[R1, #+0]
    264            
    265            PWMSetupAudio();
   \   000000E4   0x.... 0x....      BL       PWMSetupAudio
    266            
    267          } /* end GpioSetup() */
   \   000000E8   0xBD01             POP      {R0,PC}          ;; return
    268          
    269          
    270          /*----------------------------------------------------------------------------
    271          Function: PWMSetupAudio
    272          
    273          Description:
    274          Configures the PWM peripheral for audio operation on H0 and H1 channels.
    275          
    276          Requires:
    277            - Peripheral resources not used for any other function.
    278          
    279          Promises:
    280            - PWM is configured for PWM mode and currently off.
    281          */

   \                                 In section .text, align 2, keep-with-next
    282          void PWMSetupAudio(void)
    283          {
    284            /* Set all intialization values */
    285            AT91C_BASE_PWMC->PWMC_CLK = PWM_CLK_INIT;
   \                     PWMSetupAudio: (+1)
   \   00000000   0xF05F 0x1001      MOVS     R0,#+65537
   \   00000004   0x....             LDR.N    R1,??DataTable6_60  ;; 0x4008c000
   \   00000006   0x6008             STR      R0,[R1, #+0]
    286            AT91C_BASE_PWMC->PWMC_SCM = PWM_SCM_INIT;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable6_61  ;; 0x4008c020
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    287            
    288            AT91C_BASE_PWMC_CH0->PWMC_CMR = PWM_CMR0_INIT;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x....             LDR.N    R1,??DataTable6_62  ;; 0x4008c200
   \   00000012   0x6008             STR      R0,[R1, #+0]
    289            AT91C_BASE_PWMC_CH0->PWMC_CPRDR    = PWM_CPRD0_INIT; /* Set current frequency */
   \   00000014   0xF241 0x7070      MOVW     R0,#+6000
   \   00000018   0x....             LDR.N    R1,??DataTable6_63  ;; 0x4008c20c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    290            AT91C_BASE_PWMC_CH0->PWMC_CPRDUPDR = PWM_CPRD0_INIT; /* Latch CPRD values */
   \   0000001C   0xF241 0x7070      MOVW     R0,#+6000
   \   00000020   0x....             LDR.N    R1,??DataTable6_64  ;; 0x4008c210
   \   00000022   0x6008             STR      R0,[R1, #+0]
    291            AT91C_BASE_PWMC_CH0->PWMC_CDTYR    = PWM_CDTY0_INIT; /* Set 50% duty */
   \   00000024   0xF642 0x60E0      MOVW     R0,#+12000
   \   00000028   0x....             LDR.N    R1,??DataTable6_65  ;; 0x4008c204
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    292            AT91C_BASE_PWMC_CH0->PWMC_CDTYUPDR = PWM_CDTY0_INIT; /* Latch CDTY values */
   \   0000002C   0xF642 0x60E0      MOVW     R0,#+12000
   \   00000030   0x....             LDR.N    R1,??DataTable6_66  ;; 0x4008c208
   \   00000032   0x6008             STR      R0,[R1, #+0]
    293          
    294            AT91C_BASE_PWMC_CH1->PWMC_CMR = PWM_CMR1_INIT;
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x....             LDR.N    R1,??DataTable6_67  ;; 0x4008c220
   \   00000038   0x6008             STR      R0,[R1, #+0]
    295            AT91C_BASE_PWMC_CH1->PWMC_CPRDR    = PWM_CPRD1_INIT; /* Set current frequency  */
   \   0000003A   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000003E   0x....             LDR.N    R1,??DataTable6_68  ;; 0x4008c22c
   \   00000040   0x6008             STR      R0,[R1, #+0]
    296            AT91C_BASE_PWMC_CH1->PWMC_CPRDUPDR = PWM_CPRD1_INIT; /* Latch CPRD values */
   \   00000042   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000046   0x....             LDR.N    R1,??DataTable6_69  ;; 0x4008c230
   \   00000048   0x6008             STR      R0,[R1, #+0]
    297            AT91C_BASE_PWMC_CH1->PWMC_CDTYR    = PWM_CDTY1_INIT; /* Set 50% duty */
   \   0000004A   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000004E   0x....             LDR.N    R1,??DataTable6_70  ;; 0x4008c224
   \   00000050   0x6008             STR      R0,[R1, #+0]
    298            AT91C_BASE_PWMC_CH1->PWMC_CDTYUPDR = PWM_CDTY1_INIT; /* Latch CDTY values */
   \   00000052   0xF640 0x30B8      MOVW     R0,#+3000
   \   00000056   0x....             LDR.N    R1,??DataTable6_71  ;; 0x4008c228
   \   00000058   0x6008             STR      R0,[R1, #+0]
    299          
    300            
    301          } /* end PWMSetupAudio() */
   \   0000005A   0x4770             BX       LR               ;; return
    302          
    303          
    304          /*----------------------------------------------------------------------------
    305          Function: PWMAudioSetFrequency
    306          
    307          Description:
    308          Configures the PWM peripheral with the desired frequency.
    309          Note, we don't care if we interrupt the current cycle, so the direct registers
    310          are used rather than the double-buffered values.
    311          
    312          Requires:
    313            - u32Channel_ is the channel of interest - either AT91C_PWMC_CHID0 or AT91C_PWMC_CHID1
    314            - u16Frequency_ is in Hertz and should be in the range 100 - 20,000 since
    315              that is the audible range.  Higher and lower frequencies are allowed, though.
    316            - The PWM peripheral is correctly configured for the current processor clock speed.
    317            - CPRE_CLCK is the clock frequency for the PWM peripheral
    318          
    319          Promises:
    320            - The frequency and duty cycle values for the requested channel are calculated
    321              and then latched to their respective update registers (CPRDUPDR, CDTYUPDR)
    322            - If the channel is not valid, nothing happens
    323          */

   \                                 In section .text, align 2, keep-with-next
    324          void PWMAudioSetFrequency(u32 u32Channel_, u16 u16Frequency_)
    325          {
   \                     PWMAudioSetFrequency: (+1)
   \   00000000   0xB410             PUSH     {R4}
    326            u32 u32ChannelPeriod;
    327            
    328            u32ChannelPeriod = CPRE_CLCK / u16Frequency_;
   \   00000002   0x....             LDR.N    R3,??DataTable6_72  ;; 0x5b8d80
   \   00000004   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   0xFBB3 0xF3F1      UDIV     R3,R3,R1
   \   0000000A   0x001A             MOVS     R2,R3
    329            
    330            if(u32Channel_ == BUZZER1)
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD10F             BNE.N    ??PWMAudioSetFrequency_0
    331            {
    332              /* Set different registers depending on if PWM is already running */
    333              if (AT91C_BASE_PWMC->PWMC_SR & AT91C_PWMC_CHID0)
   \   00000010   0x....             LDR.N    R3,??DataTable6_73  ;; 0x4008c00c
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0x07DB             LSLS     R3,R3,#+31
   \   00000016   0xD505             BPL.N    ??PWMAudioSetFrequency_1
    334              {
    335                /* Beeper is already running, so use update registers */
    336                AT91C_BASE_PWMC_CH0->PWMC_CPRDUPDR = u32ChannelPeriod;   
   \   00000018   0x....             LDR.N    R3,??DataTable6_64  ;; 0x4008c210
   \   0000001A   0x601A             STR      R2,[R3, #+0]
    337                AT91C_BASE_PWMC_CH0->PWMC_CDTYUPDR = u32ChannelPeriod >> 1; 
   \   0000001C   0x0853             LSRS     R3,R2,#+1
   \   0000001E   0x....             LDR.N    R4,??DataTable6_66  ;; 0x4008c208
   \   00000020   0x6023             STR      R3,[R4, #+0]
   \   00000022   0xE016             B.N      ??PWMAudioSetFrequency_2
    338              }
    339              else
    340              {
    341                /* Beeper is off, so use direct registers */
    342                AT91C_BASE_PWMC_CH0->PWMC_CPRDR = u32ChannelPeriod;
   \                     ??PWMAudioSetFrequency_1: (+1)
   \   00000024   0x....             LDR.N    R3,??DataTable6_63  ;; 0x4008c20c
   \   00000026   0x601A             STR      R2,[R3, #+0]
    343                AT91C_BASE_PWMC_CH0->PWMC_CDTYR = u32ChannelPeriod >> 1;
   \   00000028   0x0853             LSRS     R3,R2,#+1
   \   0000002A   0x....             LDR.N    R4,??DataTable6_65  ;; 0x4008c204
   \   0000002C   0x6023             STR      R3,[R4, #+0]
   \   0000002E   0xE010             B.N      ??PWMAudioSetFrequency_2
    344              }
    345            }
    346            
    347            else if(u32Channel_ == BUZZER2)
   \                     ??PWMAudioSetFrequency_0: (+1)
   \   00000030   0x2802             CMP      R0,#+2
   \   00000032   0xD10E             BNE.N    ??PWMAudioSetFrequency_2
    348            {
    349              /* Set different registers depending on if PWM is already running */
    350              if (AT91C_BASE_PWMC->PWMC_SR & AT91C_PWMC_CHID1)
   \   00000034   0x....             LDR.N    R3,??DataTable6_73  ;; 0x4008c00c
   \   00000036   0x681B             LDR      R3,[R3, #+0]
   \   00000038   0x079B             LSLS     R3,R3,#+30
   \   0000003A   0xD505             BPL.N    ??PWMAudioSetFrequency_3
    351              {
    352                /* Beeper is already running, so use update registers */
    353                AT91C_BASE_PWMC_CH1->PWMC_CPRDUPDR = u32ChannelPeriod;   
   \   0000003C   0x....             LDR.N    R3,??DataTable6_69  ;; 0x4008c230
   \   0000003E   0x601A             STR      R2,[R3, #+0]
    354                AT91C_BASE_PWMC_CH1->PWMC_CDTYUPDR = u32ChannelPeriod >> 1; 
   \   00000040   0x0853             LSRS     R3,R2,#+1
   \   00000042   0x....             LDR.N    R4,??DataTable6_71  ;; 0x4008c228
   \   00000044   0x6023             STR      R3,[R4, #+0]
   \   00000046   0xE004             B.N      ??PWMAudioSetFrequency_2
    355              }
    356              else
    357              {
    358                /* Beeper is off, so use direct registers */
    359                AT91C_BASE_PWMC_CH1->PWMC_CPRDR = u32ChannelPeriod;
   \                     ??PWMAudioSetFrequency_3: (+1)
   \   00000048   0x....             LDR.N    R3,??DataTable6_68  ;; 0x4008c22c
   \   0000004A   0x601A             STR      R2,[R3, #+0]
    360                AT91C_BASE_PWMC_CH1->PWMC_CDTYR = u32ChannelPeriod >> 1;
   \   0000004C   0x0853             LSRS     R3,R2,#+1
   \   0000004E   0x....             LDR.N    R4,??DataTable6_70  ;; 0x4008c224
   \   00000050   0x6023             STR      R3,[R4, #+0]
    361              }
    362            }
    363            
    364          } /* end PWMAudioSetFrequency() */
   \                     ??PWMAudioSetFrequency_2: (+1)
   \   00000052   0xBC10             POP      {R4}
   \   00000054   0x4770             BX       LR               ;; return
    365          
    366          
    367          /*----------------------------------------------------------------------------
    368          Function: PWMAudioOn
    369          
    370          Description:
    371          Enables a PWM channel.
    372          
    373          Requires:
    374            - All peripheral values should be configured
    375            - u32Channel_ is BUZZER1 or BUZZER2
    376          
    377          Promises:
    378            - PWM for the selected channel is enabled
    379          */

   \                                 In section .text, align 2, keep-with-next
    380          void PWMAudioOn(u32 u32Channel_)
    381          {
    382            /* Enable the channel */
    383            AT91C_BASE_PWMC->PWMC_ENA = u32Channel_;  
   \                     PWMAudioOn: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_74  ;; 0x4008c004
   \   00000002   0x6008             STR      R0,[R1, #+0]
    384          
    385          } /* end PWMAudioOn() */
   \   00000004   0x4770             BX       LR               ;; return
    386          
    387          
    388          /*----------------------------------------------------------------------------
    389          Function: PWMAudioOff
    390          
    391          Description:
    392          Disables a PWM channel.
    393          
    394          Requires:
    395            - u32Channel_ is BUZZER1 or BUZZER2
    396          
    397          Promises:
    398            - PWM for the selected channel is disabled
    399          */

   \                                 In section .text, align 2, keep-with-next
    400          void PWMAudioOff(u32 u32Channel_)
    401          {
    402            /* Enable the channel */
    403            AT91C_BASE_PWMC->PWMC_DIS = u32Channel_;  
   \                     PWMAudioOff: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable6_75  ;; 0x4008c008
   \   00000002   0x6008             STR      R0,[R1, #+0]
    404          
    405          } /* end PWMAudioOff() */
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     G_u32SystemTime1s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0xE000E018         DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x10018500         DC32     0x10018500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x400E1254         DC32     0x400e1254

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0xA5000001         DC32     0xa5000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x400E1250         DC32     0x400e1250

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x84030007         DC32     0x84030007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x400E0C00         DC32     0x400e0c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x7BFCFFF8         DC32     0x7bfcfff8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x400E0C04         DC32     0x400e0c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0xBF55D7F9         DC32     0xbf55d7f9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x400E0C10         DC32     0x400e0c10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x40AA2806         DC32     0x40aa2806

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x400E0C14         DC32     0x400e0c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x400E0C20         DC32     0x400e0c20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0x400E0C24         DC32     0x400e0c24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x88010000         DC32     0x88010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0x400E0C30         DC32     0x400e0c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x400E0C34         DC32     0x400e0c34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x04000600         DC32     0x4000600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x400E0C50         DC32     0x400e0c50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0xFBFFF9FF         DC32     0xfbfff9ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x400E0C54         DC32     0x400e0c54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x400E0C60         DC32     0x400e0c60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   0x400E0C64         DC32     0x400e0c64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_28:
   \   00000000   0x400E0C70         DC32     0x400e0c70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_29:
   \   00000000   0x400E0C80         DC32     0x400e0c80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_30:
   \   00000000   0x400E0C84         DC32     0x400e0c84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_31:
   \   00000000   0x400E0C8C         DC32     0x400e0c8c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_32:
   \   00000000   0xB4010000         DC32     0xb4010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_33:
   \   00000000   0x400E0CA0         DC32     0x400e0ca0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_34:
   \   00000000   0x400E0CA4         DC32     0x400e0ca4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_35:
   \   00000000   0x01BFFFE7         DC32     0x1bfffe7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_36:
   \   00000000   0x400E0E00         DC32     0x400e0e00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_37:
   \   00000000   0x00400018         DC32     0x400018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_38:
   \   00000000   0x400E0E04         DC32     0x400e0e04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_39:
   \   00000000   0x01BFFFE0         DC32     0x1bfffe0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_40:
   \   00000000   0x400E0E10         DC32     0x400e0e10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_41:
   \   00000000   0x0040001F         DC32     0x40001f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_42:
   \   00000000   0x400E0E14         DC32     0x400e0e14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_43:
   \   00000000   0x400E0E20         DC32     0x400e0e20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_44:
   \   00000000   0x400E0E24         DC32     0x400e0e24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_45:
   \   00000000   0x01BFFE00         DC32     0x1bffe00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_46:
   \   00000000   0x400E0E30         DC32     0x400e0e30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_47:
   \   00000000   0x400E0E34         DC32     0x400e0e34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_48:
   \   00000000   0x400E0E50         DC32     0x400e0e50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_49:
   \   00000000   0x400E0E54         DC32     0x400e0e54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_50:
   \   00000000   0x01FFFE1F         DC32     0x1fffe1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_51:
   \   00000000   0x400E0E60         DC32     0x400e0e60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_52:
   \   00000000   0x400E0E64         DC32     0x400e0e64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_53:
   \   00000000   0x400E0E70         DC32     0x400e0e70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_54:
   \   00000000   0x400E0E80         DC32     0x400e0e80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_55:
   \   00000000   0x400E0E84         DC32     0x400e0e84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_56:
   \   00000000   0x400E0E8C         DC32     0x400e0e8c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_57:
   \   00000000   0x001FFFE0         DC32     0x1fffe0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_58:
   \   00000000   0x400E0EA0         DC32     0x400e0ea0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_59:
   \   00000000   0x400E0EA4         DC32     0x400e0ea4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_60:
   \   00000000   0x4008C000         DC32     0x4008c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_61:
   \   00000000   0x4008C020         DC32     0x4008c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_62:
   \   00000000   0x4008C200         DC32     0x4008c200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_63:
   \   00000000   0x4008C20C         DC32     0x4008c20c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_64:
   \   00000000   0x4008C210         DC32     0x4008c210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_65:
   \   00000000   0x4008C204         DC32     0x4008c204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_66:
   \   00000000   0x4008C208         DC32     0x4008c208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_67:
   \   00000000   0x4008C220         DC32     0x4008c220

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_68:
   \   00000000   0x4008C22C         DC32     0x4008c22c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_69:
   \   00000000   0x4008C230         DC32     0x4008c230

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_70:
   \   00000000   0x4008C224         DC32     0x4008c224

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_71:
   \   00000000   0x4008C228         DC32     0x4008c228

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_72:
   \   00000000   0x005B8D80         DC32     0x5b8d80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_73:
   \   00000000   0x4008C00C         DC32     0x4008c00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_74:
   \   00000000   0x4008C004         DC32     0x4008c004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_75:
   \   00000000   0x4008C008         DC32     0x4008c008
    406          
    407          
    408          /*--------------------------------------------------------------------------------------------------------------------*/
    409          /* End of File */
    410          /*--------------------------------------------------------------------------------------------------------------------*/
    411          
    412          
    413          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ClockSetup
       8   GpioSetup
         8   -> PWMSetupAudio
       0   PWMAudioOff
       0   PWMAudioOn
       4   PWMAudioSetFrequency
       0   PWMSetupAudio
       0   SysTickSetup
       0   SystemSleep
       0   WatchDogSetup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_31
       4  ??DataTable6_32
       4  ??DataTable6_33
       4  ??DataTable6_34
       4  ??DataTable6_35
       4  ??DataTable6_36
       4  ??DataTable6_37
       4  ??DataTable6_38
       4  ??DataTable6_39
       4  ??DataTable6_4
       4  ??DataTable6_40
       4  ??DataTable6_41
       4  ??DataTable6_42
       4  ??DataTable6_43
       4  ??DataTable6_44
       4  ??DataTable6_45
       4  ??DataTable6_46
       4  ??DataTable6_47
       4  ??DataTable6_48
       4  ??DataTable6_49
       4  ??DataTable6_5
       4  ??DataTable6_50
       4  ??DataTable6_51
       4  ??DataTable6_52
       4  ??DataTable6_53
       4  ??DataTable6_54
       4  ??DataTable6_55
       4  ??DataTable6_56
       4  ??DataTable6_57
       4  ??DataTable6_58
       4  ??DataTable6_59
       4  ??DataTable6_6
       4  ??DataTable6_60
       4  ??DataTable6_61
       4  ??DataTable6_62
       4  ??DataTable6_63
       4  ??DataTable6_64
       4  ??DataTable6_65
       4  ??DataTable6_66
       4  ??DataTable6_67
       4  ??DataTable6_68
       4  ??DataTable6_69
       4  ??DataTable6_7
       4  ??DataTable6_70
       4  ??DataTable6_71
       4  ??DataTable6_72
       4  ??DataTable6_73
       4  ??DataTable6_74
       4  ??DataTable6_75
       4  ??DataTable6_8
       4  ??DataTable6_9
       2  ClockSetup
       4  G_u32SystemTime1ms
       4  G_u32SystemTime1s
     234  GpioSetup
       6  PWMAudioOff
       6  PWMAudioOn
      86  PWMAudioSetFrequency
      92  PWMSetupAudio
      34  SysTickSetup
      16  SystemSleep
      14  WatchDogSetup

 
   8 bytes in section .bss
 794 bytes in section .text
 
 794 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: 1
